/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CampaignContractInterface extends ethers.utils.Interface {
  functions: {
    "approvals(uint256,address)": FunctionFragment;
    "approveRequest(uint256)": FunctionFragment;
    "contribute()": FunctionFragment;
    "contributorCount()": FunctionFragment;
    "contributors(address)": FunctionFragment;
    "createRequest(string,uint256,address)": FunctionFragment;
    "finalizeRequest(uint256)": FunctionFragment;
    "getRequests()": FunctionFragment;
    "getSummary()": FunctionFragment;
    "manager()": FunctionFragment;
    "minimumContribution()": FunctionFragment;
    "requestCount()": FunctionFragment;
    "requests(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approvals",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributors",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createRequest",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSummary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approvals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSummary", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;

  events: {};
}

export class CampaignContract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CampaignContractInterface;

  functions: {
    approvals(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "approvals(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    approveRequest(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveRequest(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    contribute(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "contribute()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    contributorCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "contributorCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    contributors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "contributors(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    createRequest(
      description: string,
      amount: BigNumberish,
      recepient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createRequest(string,uint256,address)"(
      description: string,
      amount: BigNumberish,
      recepient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    finalizeRequest(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "finalizeRequest(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getRequests(overrides?: CallOverrides): Promise<{
      0: {
        description: string;
        amount: BigNumber;
        recepient: string;
        complete: boolean;
        approvalCount: BigNumber;
        0: string;
        1: BigNumber;
        2: string;
        3: boolean;
        4: BigNumber;
      }[];
    }>;

    "getRequests()"(overrides?: CallOverrides): Promise<{
      0: {
        description: string;
        amount: BigNumber;
        recepient: string;
        complete: boolean;
        approvalCount: BigNumber;
        0: string;
        1: BigNumber;
        2: string;
        3: boolean;
        4: BigNumber;
      }[];
    }>;

    getSummary(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    "getSummary()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    manager(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "manager()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    minimumContribution(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "minimumContribution()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    requestCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "requestCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      description: string;
      amount: BigNumber;
      recepient: string;
      complete: boolean;
      approvalCount: BigNumber;
      0: string;
      1: BigNumber;
      2: string;
      3: boolean;
      4: BigNumber;
    }>;

    "requests(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      description: string;
      amount: BigNumber;
      recepient: string;
      complete: boolean;
      approvalCount: BigNumber;
      0: string;
      1: BigNumber;
      2: string;
      3: boolean;
      4: BigNumber;
    }>;
  };

  approvals(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "approvals(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approveRequest(
    index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveRequest(uint256)"(
    index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  contribute(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "contribute()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  contributorCount(overrides?: CallOverrides): Promise<BigNumber>;

  "contributorCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  contributors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "contributors(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createRequest(
    description: string,
    amount: BigNumberish,
    recepient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createRequest(string,uint256,address)"(
    description: string,
    amount: BigNumberish,
    recepient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  finalizeRequest(
    index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "finalizeRequest(uint256)"(
    index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getRequests(
    overrides?: CallOverrides
  ): Promise<
    {
      description: string;
      amount: BigNumber;
      recepient: string;
      complete: boolean;
      approvalCount: BigNumber;
      0: string;
      1: BigNumber;
      2: string;
      3: boolean;
      4: BigNumber;
    }[]
  >;

  "getRequests()"(
    overrides?: CallOverrides
  ): Promise<
    {
      description: string;
      amount: BigNumber;
      recepient: string;
      complete: boolean;
      approvalCount: BigNumber;
      0: string;
      1: BigNumber;
      2: string;
      3: boolean;
      4: BigNumber;
    }[]
  >;

  getSummary(overrides?: CallOverrides): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: string;
  }>;

  "getSummary()"(overrides?: CallOverrides): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: string;
  }>;

  manager(overrides?: CallOverrides): Promise<string>;

  "manager()"(overrides?: CallOverrides): Promise<string>;

  minimumContribution(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumContribution()"(overrides?: CallOverrides): Promise<BigNumber>;

  requestCount(overrides?: CallOverrides): Promise<BigNumber>;

  "requestCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  requests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    description: string;
    amount: BigNumber;
    recepient: string;
    complete: boolean;
    approvalCount: BigNumber;
    0: string;
    1: BigNumber;
    2: string;
    3: boolean;
    4: BigNumber;
  }>;

  "requests(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    description: string;
    amount: BigNumber;
    recepient: string;
    complete: boolean;
    approvalCount: BigNumber;
    0: string;
    1: BigNumber;
    2: string;
    3: boolean;
    4: BigNumber;
  }>;

  callStatic: {
    approvals(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approvals(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approveRequest(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveRequest(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contribute(overrides?: CallOverrides): Promise<void>;

    "contribute()"(overrides?: CallOverrides): Promise<void>;

    contributorCount(overrides?: CallOverrides): Promise<BigNumber>;

    "contributorCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    contributors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "contributors(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createRequest(
      description: string,
      amount: BigNumberish,
      recepient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createRequest(string,uint256,address)"(
      description: string,
      amount: BigNumberish,
      recepient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeRequest(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "finalizeRequest(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRequests(
      overrides?: CallOverrides
    ): Promise<
      {
        description: string;
        amount: BigNumber;
        recepient: string;
        complete: boolean;
        approvalCount: BigNumber;
        0: string;
        1: BigNumber;
        2: string;
        3: boolean;
        4: BigNumber;
      }[]
    >;

    "getRequests()"(
      overrides?: CallOverrides
    ): Promise<
      {
        description: string;
        amount: BigNumber;
        recepient: string;
        complete: boolean;
        approvalCount: BigNumber;
        0: string;
        1: BigNumber;
        2: string;
        3: boolean;
        4: BigNumber;
      }[]
    >;

    getSummary(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    "getSummary()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    manager(overrides?: CallOverrides): Promise<string>;

    "manager()"(overrides?: CallOverrides): Promise<string>;

    minimumContribution(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumContribution()"(overrides?: CallOverrides): Promise<BigNumber>;

    requestCount(overrides?: CallOverrides): Promise<BigNumber>;

    "requestCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      description: string;
      amount: BigNumber;
      recepient: string;
      complete: boolean;
      approvalCount: BigNumber;
      0: string;
      1: BigNumber;
      2: string;
      3: boolean;
      4: BigNumber;
    }>;

    "requests(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      description: string;
      amount: BigNumber;
      recepient: string;
      complete: boolean;
      approvalCount: BigNumber;
      0: string;
      1: BigNumber;
      2: string;
      3: boolean;
      4: BigNumber;
    }>;
  };

  filters: {};

  estimateGas: {
    approvals(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approvals(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveRequest(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveRequest(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    contribute(overrides?: PayableOverrides): Promise<BigNumber>;

    "contribute()"(overrides?: PayableOverrides): Promise<BigNumber>;

    contributorCount(overrides?: CallOverrides): Promise<BigNumber>;

    "contributorCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    contributors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "contributors(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createRequest(
      description: string,
      amount: BigNumberish,
      recepient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createRequest(string,uint256,address)"(
      description: string,
      amount: BigNumberish,
      recepient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    finalizeRequest(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "finalizeRequest(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getRequests(overrides?: CallOverrides): Promise<BigNumber>;

    "getRequests()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSummary(overrides?: CallOverrides): Promise<BigNumber>;

    "getSummary()"(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    "manager()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumContribution(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumContribution()"(overrides?: CallOverrides): Promise<BigNumber>;

    requestCount(overrides?: CallOverrides): Promise<BigNumber>;

    "requestCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    requests(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "requests(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approvals(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approvals(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveRequest(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveRequest(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    contribute(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "contribute()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    contributorCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contributorCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contributors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contributors(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createRequest(
      description: string,
      amount: BigNumberish,
      recepient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createRequest(string,uint256,address)"(
      description: string,
      amount: BigNumberish,
      recepient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    finalizeRequest(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finalizeRequest(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getRequests(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRequests()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSummary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSummary()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "manager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumContribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minimumContribution()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "requestCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requests(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
